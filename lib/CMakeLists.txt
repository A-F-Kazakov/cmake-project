cmake_minimum_required(VERSION 3.13)

project(${PROJECT_NAME}-lib VERSION 0.0.1)

string(TOUPPER ${PROJECT_NAME} PROJECT_NAME_UPPER)
string(REPLACE "-" "_" PROJECT_NAME_UPPER ${PROJECT_NAME_UPPER})

set(${PROJECT_NAME_UPPER}_VERSION ${PROJECT_VERSION})
set(${PROJECT_NAME_UPPER}_VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
set(${PROJECT_NAME_UPPER}_VERSION_MINOR ${PROJECT_VERSION_MINOR})
set(${PROJECT_NAME_UPPER}_VERSION_PATCH ${PROJECT_VERSION_PATCH})

message(STATUS "${PROJECT_NAME} version: ${${PROJECT_NAME_UPPER}_VERSION_MAJOR}.${${PROJECT_NAME_UPPER}_VERSION_MINOR}.${${PROJECT_NAME_UPPER}_VERSION_PATCH}")

option(${PROJECT_NAME_UPPER}_BUILD_SHARED_LIB "Enable compilation of shared libraries" ${BUILD_SHARED_LIBS})
option(${PROJECT_NAME_UPPER}_BUILD_TESTS "Build ${PROJECT_NAME} tests" OFF)
option(${PROJECT_NAME_UPPER}_BUILD_EXAMPLES "Build ${PROJECT_NAME} examples" OFF)

file(GLOB ${PROJECT_NAME}_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/include/${CMAKE_PROJECT_NAME}/*.hpp)

if(${PROJECT_NAME_UPPER}_BUILD_SHARED_LIB)
	add_library(${PROJECT_NAME} SHARED)
else()
	add_library(${PROJECT_NAME} STATIC)
endif()

target_include_directories(${PROJECT_NAME}
	PUBLIC
		$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
		$<INSTALL_INTERFACE:include>
)

add_subdirectory(src)

if(${PROJECT_NAME_UPPER}_BUILD_TESTS)
	add_subdirectory(tests)
endif()
if(${PROJECT_NAME_UPPER}_BUILD_EXAMPLES)
	add_subdirectory(examples)
endif()

add_library(${CMAKE_PROJECT_NAME}::lib ALIAS ${PROJECT_NAME})
